#!/usr/bin/env python3
import argparse

description = """Runs a L2G case, described within a L2G JSON file.
"""

parser = argparse.ArgumentParser(description=description)

parser.add_argument('-i', '--input', type=str,
                    required=True, help='Input Json file')
parser.add_argument('-v', '--verbose', help='Verbosity',
                    default=1, type=int)
args = parser.parse_args()

import os
import sys
import l2g
if args.verbose:
    l2g.addStreamHandler()
    l2g.enableLogging()

l2g.log.info("Starting up...")
# Check if the JSON file can be read.
json_input = args.input
if not os.access(json_input, mode=os.R_OK):
    l2g.log.info(f"Could not read: '{json_input}'!")
    sys.exit(-1)

import l2g.workflow

with open(json_input, 'r') as f:
    json_data = f.read()

list_of_targets, list_of_equilibriums, list_of_hlms = l2g.workflow.load_json_configuration(json_data)

# Dump the data in dict for additional read.
json_dict = l2g.workflow.json_loads(json_data)

target = list_of_targets[0]
equilibrium = list_of_equilibriums[0]
hlm = None
if len(list_of_hlms):
    hlm = list_of_hlms[0]


case = l2g.workflow.create_case(target, equilibrium, hlm)
# Check for any additional parameters to set.
case.prepare_flt_obj()
l2g.log.info("Reading target geometry.")
case.prepare_result_med()

# Custom name
med_file_name = ""
if "name" in json_dict:
    case.case_name = json_dict["name"]
    case.flt_obj.name = json_dict["name"]
    med_file_name = json_dict["name"]

l2g.log.info("Amassing equilibrium input data")
case.prepare_equil_iterator_obj()

l2g.log.info("Checking if output file contains already the FLT data.")
output_directory = ""
if "output_directory" in json_dict:
    output_directory = json_dict["output_directory"]


case.see_if_results_exists(output_directory=output_directory,
    med_file_name=med_file_name)

l2g.log.info("Creating output result file if necessary")
case.create_result_file_if_necessary()
l2g.log.info("Running case")
case.main()

