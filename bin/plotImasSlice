#!/usr/bin/env python3
import argparse
description = """From an IMAS time slice get a LCFS and Psi image.
"""


parser = argparse.ArgumentParser(description='Create EQDSK from IDS time slice')

parser.add_argument('-s', '--shot', metavar='SHOT', type=int,
                    help='Shot number',
                    required=True)
parser.add_argument('-r', '--run', metavar='RUN', type=int,
                    help='Run number', required=True)
parser.add_argument('-u', '--user', metavar='USER', type=str, default="public",
                    help='Username')
parser.add_argument('-d', '--device',
                    metavar="DEVICE", type=str, default="ITER", help='Device')
parser.add_argument('-ts', '--time_slice', metavar='#time_slice', type=float,
                    default=0.0, help='Time slice')
parser.add_argument('-o', '--output_name', type=str, default="out",
                    help="Base name of files.", metavar="OUTNAME")

args = parser.parse_args()

import imas
import matplotlib.pyplot as plt
import numpy as np

ids = imas.DBEntry(backend_id=imas.imasdef.MDSPLUS_BACKEND,
    user_name=args.user, db_name=args.device, shot=args.shot, run=args.run,
    data_version="3")
ids.open()


# Get wall silhouette
wall_ids = ids.get("wall")
WALL_R = wall_ids.description_2d[0].limiter.unit[0].outline.r
WALL_Z = wall_ids.description_2d[0].limiter.unit[0].outline.z

# Get LCFSs

equilibrium = ids.get_slice("equilibrium", args.time_slice,
                            imas.imasdef.CLOSEST_INTERP)
slice = equilibrium.time_slice[0]
threshold = 0.5

lcfs_collection_r = []
lcfs_collection_z = []
if len(slice.boundary_separatrix.outline.r):
    r = slice.boundary_separatrix.outline.r
    z = slice.boundary_separatrix.outline.z

    diff_r = np.abs(np.diff(r))
    diff_z = np.abs(np.diff(z))
    indexes = np.where(np.logical_or(diff_r > threshold, diff_z > threshold))

    if len(indexes[0]) == 0:
        lcfs_collection_r.append(r)
        lcfs_collection_z.append(z)
    else:
        prev_index = 0
        for index in indexes[0]:
            lcfs_collection_r.append(r[prev_index:index+1])
            lcfs_collection_z.append(z[prev_index:index+1])
            prev_index = index+1
        lcfs_collection_r.append(r[prev_index:])
        lcfs_collection_z.append(z[prev_index:])

secondary_collection_r = []
secondary_collection_z = []
if len(slice.boundary_secondary_separatrix.outline.r):
    r = slice.boundary_secondary_separatrix.outline.r
    z = slice.boundary_secondary_separatrix.outline.z

    diff_r = np.abs(np.diff(r))
    diff_z = np.abs(np.diff(z))
    indexes = np.where(np.logical_or(diff_r > threshold, diff_z > threshold))

    if len(indexes[0]) == 0:
        secondary_collection_r.append(r)
        secondary_collection_z.append(z)
    else:
        prev_index = 0
        for index in indexes[0]:
            secondary_collection_r.append(r[prev_index:index+1])
            secondary_collection_z.append(z[prev_index:index+1])
            prev_index = index+1
        secondary_collection_r.append(r[prev_index:])
        secondary_collection_z.append(z[prev_index:])

figure = plt.figure(figsize=(600/100, 800/100), dpi=100)
ax = figure.add_subplot(111)

ax.grid(True)
ax.axis("equal")
ax.set_xlabel('R [m]')
ax.set_ylabel('Z [m]')

# Plot wall
ax.plot(WALL_R, WALL_Z, 'r-')

for i in range(len(lcfs_collection_r)):
    ax.plot(lcfs_collection_r[i], lcfs_collection_z[i], '-', c='b')
for i in range(len(secondary_collection_r)):
    ax.plot(secondary_collection_r[i], secondary_collection_z[i], '-', c='g')
ax.set_title(f"S={args.shot} R={args.run} U={args.user} D={args.device} t={args.time_slice} s")

ax.set_ylim((np.min(WALL_Z) -1), np.max(WALL_Z) + 1)
ax.set_xlim((np.min(WALL_R) -1), np.max(WALL_R) + 1)
# plt.show()

figure.savefig(f"{args.output_name}_lcfs.pdf")
figure.savefig(f"{args.output_name}_lcfs.png")

#

# Now the PSI
figure = plt.figure(figsize=(600/100, 800/100), dpi=100)
ax = figure.add_subplot(111)
ax.grid(True)
ax.axis("equal")
ax.set_xlabel('R [m]')
ax.set_ylabel('Z [m]')
# Plot wall
ax.plot(WALL_R, WALL_Z, 'r-')
ax.set_title(f"S={args.shot} R={args.run} U={args.user} D={args.device} t={args.time_slice} s")

import l2g.equil
equilibrium = l2g.equil.getEquilibriumFromIMAS(slice, wall_ids)
eq = l2g.equil.EQ(equilibrium)
eq.evaluate()

import l2g.plot._plot_psi
l2g.plot._plot_psi.plot_psi_to_mpl_ax(ax, eq)
ax.set_ylim((np.min(WALL_Z) -1), np.max(WALL_Z) + 1)
ax.set_xlim((np.min(WALL_R) -1), np.max(WALL_R) + 1)
figure.savefig(f"{args.output_name}_psi.pdf")
figure.savefig(f"{args.output_name}_psi.png")