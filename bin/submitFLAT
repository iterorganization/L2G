#!/usr/bin/env bash

declare -a flatopts
flatopts=()

REDIRECT_OUTPUT_TO_LOG_FILE=1
SLURM_COMMAND=sbatch

while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -h|--help)
            echo "This script submits a L2G case to the ITER HPC."
            echo "Example:"
            echo "submitFLAT l2g_case.yaml run geom_name equil_name hlm_name"
            echo "Available options (verbatim):"
            echo "partition=<partition_name> - Specify slurm partition name. No spaces between = operator"
            echo "cpus_per_task=<num_of_cpus> - Specify how many OpenMP threads you wish to use. No spaces between = operator.Default, maximum available"
            echo "slurm_command=srun - Sometimes we wish to catch the output directly from the submitted process. In this case we provide the following option, verbatim, in order to catch the output."
            exit
            ;;
        slurm_command=srun)
            REDIRECT_OUTPUT_TO_LOG_FILE=0
            SLURM_COMMAND=srun
            shift
            ;;
        partition=*)
            PARTITION_NAME=${1#*=}
            shift
            ;;
        cpus_per_task=*)
            CPUS_PER_TASK=${1#*=}
            shift
            ;;
        *.yaml) # L2G case file
            CONF_FILE=$1
            shift
            ;;
        *) # Pass them to flat
            flatopts+=("$key")
            shift
            ;;
    esac
done

SCRIPTPATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"

JOB_NAME="${flatopts[1]}-${flatopts[2]}" # The second command relates to the geometry
JOB_NAME=${JOB_NAME:-"L2G-job"}
echo "Running job ${JOB_NAME}"
LOG_DIR=$(realpath ${CONF_FILE} | xargs dirname)/log
mkdir -p ${LOG_DIR}

if [ "${REDIRECT_OUTPUT_TO_LOG_FILE}" = "1" ]; then
    LOG_NAME=${LOG_DIR}/${JOB_NAME}

    # Add time stamp if date command exists
    if hash date 2>/dev/null; then
        LOG_NAME="${LOG_NAME}_$(date +%d-%m-%y_%T)"
    fi
    LOG_NAME="${LOG_NAME}_slurm.log"

    # Now modify the SLURM_COMMAND
    SLURM_COMMAND="${SLURM_COMMAND} --output=${LOG_NAME}"
    echo "Log file: ${LOG_NAME}"
fi

# Defaults to gen10_ib
PARTITION_NAME=${PARTITION_NAME:-"gen10_ib"}

# Just to be sure, when generating graphics on compute nodes, use Agg for
# matplotlib backend. Otherwise an error "could not connect to display"
# will crash the run
export MPLBACKEND=Agg

#                                        Get CPU number string
#                                                |                                  Remove alpha characters [28+ -> 28]
#                                                v                                           v
CPUS_PER_TASK=${CPUS_PER_TASK:-$(sinfo -p ${PARTITION_NAME} -O "cpus" --noheader | sed 's/[^0-9]*//g')}

# Now run the command
${SLURM_COMMAND} --partition=${PARTITION_NAME} --cpus-per-task=${CPUS_PER_TASK} --nodes=1 ${SCRIPTPATH}/FLAT.sbatch "${CONF_FILE}" "${flatopts[@]}"
